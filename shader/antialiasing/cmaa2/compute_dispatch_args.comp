#version 460

#extension GL_ARB_separate_shader_objects       : enable
#extension GL_GOOGLE_include_directive          : enable
#extension GL_EXT_control_flow_attributes       : enable

#include "cmaa2_common.glsl"

layout(binding = 8, std430) buffer UboWorkingExecuteIndirectBuffer {
  uvec3 g_workingExecuteIndirectBuffer;
  };

layout(push_constant, std140) uniform PushConstant {
  uint setupProcessCandidatesPassFlag;
  } push;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main() {
  if(push.setupProcessCandidatesPassFlag != 0) {
    uint shapeCandidateCount = g_workingControlBuffer[4];

    uint appendBufferMaxCount = g_workingShapeCandidates.length();
    shapeCandidateCount = min(shapeCandidateCount, appendBufferMaxCount);

    g_workingExecuteIndirectBuffer[0] = (shapeCandidateCount + CMAA2_PROCESS_CANDIDATES_NUM_THREADS - 1) / CMAA2_PROCESS_CANDIDATES_NUM_THREADS;
    g_workingExecuteIndirectBuffer[1] = 1;
    g_workingExecuteIndirectBuffer[2] = 1;

    g_workingControlBuffer[3] = shapeCandidateCount;
    } else /*setup deferred apply process*/ {
    uint blendLocationCount = g_workingControlBuffer[8];

    uint appendBufferMaxCount = g_workingDeferredBlendLocationList.length();
    blendLocationCount = min(blendLocationCount, appendBufferMaxCount);

#if CMAA2_DEFERRED_APPLY_THREADGROUP_SWAP
    g_workingExecuteIndirectBuffer[0] = 1;
    g_workingExecuteIndirectBuffer[1] = (blendLocationCount + CMAA2_DEFERRED_APPLY_NUM_THREADS - 1) / CMAA2_DEFERRED_APPLY_NUM_THREADS;
#else
    g_workingExecuteIndirectBuffer[0] = (blendLocationCount + CMAA2_DEFERRED_APPLY_NUM_THREADS - 1) / CMAA2_DEFERRED_APPLY_NUM_THREADS;
    g_workingExecuteIndirectBuffer[1] = 1;
#endif
    g_workingExecuteIndirectBuffer[2] = 1;

    g_workingControlBuffer[3] = blendLocationCount;

    g_workingControlBuffer[4] = 0;
    g_workingControlBuffer[8] = 0;
    g_workingControlBuffer[12] = 0;
    }
  }
